main_vararg: SEMICOLON
##
## Ends in an error in state: 72.
##
## main_vararg' -> . main_vararg [ # ]
##
## The known suffix of the stack is as follows:
##
##

Unexpected token (expecting some type)

main_vararg: TRUE TRUE
##
## Ends in an error in state: 20.
##
## function_type -> simple_type . [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
## var_ty -> simple_type . DOTS [ SEMICOLON OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## simple_type
##

Unexpected token after type.

main_vararg: TRUE SEMICOLON
##
## Ends in an error in state: 73.
##
## main_vararg -> var_ty . EOF [ # ]
##
## The known suffix of the stack is as follows:
## var_ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
##

Expected EOF after type.

main: FUNCTION OPAREN CPAREN COLON TRUE TRUE
##
## Ends in an error in state: 47.
##
## return -> COLON simple_type . [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
## return -> COLON simple_type . DOTS [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## COLON simple_type
##

Unexpected token after return type.

main: FUNCTION OPAREN CPAREN COLON SEMICOLON
##
## Ends in an error in state: 45.
##
## return -> COLON . simple_type [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
## return -> COLON . simple_type DOTS [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## COLON
##

Expected return type after ":"

main: FUNCTION OPAREN CPAREN TRUE
##
## Ends in an error in state: 44.
##
## function_type -> FUNCTION OPAREN args CPAREN . return [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## FUNCTION OPAREN args CPAREN
##

Expected return type after function

main: FUNCTION OPAREN DOTS TRUE
##
## Ends in an error in state: 29.
##
## arg -> arg_name . COLON ty [ OSQUARE CSQUARE CPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## arg_name
##

Expected type annotation after argument name

main: FUNCTION OPAREN IDENT COLON SEMICOLON
##
## Ends in an error in state: 30.
##
## arg -> arg_name COLON . ty [ OSQUARE CSQUARE CPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## arg_name COLON
##

Expected argument type after ":"

main: FUNCTION OPAREN IDENT TRUE
##
## Ends in an error in state: 23.
##
## arg_name -> name . [ COLON ]
## var -> name . [ PIPE OSQUARE DOTS DOT CSQUARE CPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## name
##

Expected type annotation, another argument or ")"

main: FUNCTION OPAREN OSQUARE SEMICOLON
##
## Ends in an error in state: 12.
##
## args -> OSQUARE . arg args_rest CSQUARE [ CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE
##

Expected optional argument definition

main: FUNCTION OPAREN OSQUARE TRUE COMMA TRUE CPAREN
##
## Ends in an error in state: 41.
##
## args -> OSQUARE arg args_rest . CSQUARE [ CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE arg args_rest
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
## In state 37, spurious reduction of production args_rest ->
## In state 38, spurious reduction of production args_rest -> COMMA arg args_rest
##

Expected "]" to close optional argument

main: FUNCTION OPAREN OSQUARE TRUE CPAREN
##
## Ends in an error in state: 32.
##
## args -> OSQUARE arg . args_rest CSQUARE [ CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
##

Expected "]" to close optional argument

main: FUNCTION OPAREN SEMICOLON
##
## Ends in an error in state: 11.
##
## function_type -> FUNCTION OPAREN . args CPAREN return [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## FUNCTION OPAREN
##

Expected argument or ")"

main: FUNCTION OPAREN TRUE COMMA FALSE CSQUARE
##
## Ends in an error in state: 43.
##
## function_type -> FUNCTION OPAREN args . CPAREN return [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## FUNCTION OPAREN args
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
## In state 37, spurious reduction of production args_rest ->
## In state 38, spurious reduction of production args_rest -> COMMA arg args_rest
## In state 51, spurious reduction of production args -> arg args_rest
##

Expecting ")" to close argument list

main: FUNCTION OPAREN TRUE COMMA SEMICOLON
##
## Ends in an error in state: 36.
##
## args_rest -> COMMA . arg args_rest [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## COMMA
##

Expected another argument

main: FUNCTION OPAREN TRUE COMMA TRUE DOTS TRUE
##
## Ends in an error in state: 37.
##
## args_rest -> COMMA arg . args_rest [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## COMMA arg
##

Expected another argument or end of argument list

main: FUNCTION OPAREN TRUE CSQUARE
##
## Ends in an error in state: 50.
##
## args -> arg . args_rest [ CPAREN ]
##
## The known suffix of the stack is as follows:
## arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
##

Expected another argument or end of argument list

main: FUNCTION OPAREN TRUE OSQUARE COMMA SEMICOLON
##
## Ends in an error in state: 34.
##
## args_rest -> OSQUARE COMMA . arg args_rest CSQUARE [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE COMMA
##

Expected another argument

main: FUNCTION OPAREN TRUE OSQUARE COMMA TRUE COMMA TRUE CPAREN
##
## Ends in an error in state: 39.
##
## args_rest -> OSQUARE COMMA arg args_rest . CSQUARE [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE COMMA arg args_rest
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
## In state 37, spurious reduction of production args_rest ->
## In state 38, spurious reduction of production args_rest -> COMMA arg args_rest
##

Expected "]" after optional argument

main: FUNCTION OPAREN TRUE OSQUARE COMMA TRUE CPAREN
##
## Ends in an error in state: 35.
##
## args_rest -> OSQUARE COMMA arg . args_rest CSQUARE [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE COMMA arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 15, spurious reduction of production arg -> var_ty
##

Expected another argument

main: FUNCTION OPAREN TRUE OSQUARE TRUE
##
## Ends in an error in state: 33.
##
## args_rest -> OSQUARE . COMMA arg args_rest CSQUARE [ CSQUARE CPAREN ]
##
## The known suffix of the stack is as follows:
## OSQUARE
##

Expected "," at start of optional argument.

main: FUNCTION TRUE
##
## Ends in an error in state: 10.
##
## function_type -> FUNCTION . OPAREN args CPAREN return [ SEMICOLON PIPE OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
## simple_type -> FUNCTION . [ SEMICOLON PIPE OSQUARE EOF DOTS CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## FUNCTION
##

Expected "(" to start function signature.

main: IDENT DOT TRUE
##
## Ends in an error in state: 17.
##
## var -> var DOT . name [ SEMICOLON PIPE OSQUARE EOF DOTS DOT CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## var DOT
##

Expected field name.

main: IDENT TRUE
##
## Ends in an error in state: 16.
##
## simple_type -> var . [ SEMICOLON PIPE OSQUARE EOF DOTS CSQUARE CPAREN COMMA CBRACE ]
## var -> var . DOT name [ SEMICOLON PIPE OSQUARE EOF DOTS DOT CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## var
##

Unexpected token after name.

main: OBRACE IDENT EQUALS SEMICOLON
##
## Ends in an error in state: 57.
##
## table_entry -> IDENT EQUALS . ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT EQUALS
##

Expected type after table key.

main: OBRACE IDENT TRUE
##
## Ends in an error in state: 56.
##
## name -> IDENT . [ SEMICOLON PIPE DOTS DOT COMMA CBRACE ]
## table_entry -> IDENT . EQUALS ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## IDENT
##

Unexpected token after name.

main: OBRACE OSQUARE SEMICOLON
##
## Ends in an error in state: 5.
##
## table_entry -> OSQUARE . ty CSQUARE EQUALS ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OSQUARE
##

Expected table key.

main: OBRACE OSQUARE TRUE CSQUARE EQUALS SEMICOLON
##
## Ends in an error in state: 54.
##
## table_entry -> OSQUARE ty CSQUARE EQUALS . ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OSQUARE ty CSQUARE EQUALS
##

Expected type after table key.

main: OBRACE OSQUARE TRUE CSQUARE TRUE
##
## Ends in an error in state: 53.
##
## table_entry -> OSQUARE ty CSQUARE . EQUALS ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OSQUARE ty CSQUARE
##

Expected "=" after table key.

main: OBRACE OSQUARE TRUE SEMICOLON
##
## Ends in an error in state: 52.
##
## table_entry -> OSQUARE ty . CSQUARE EQUALS ty [ SEMICOLON COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OSQUARE ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
##

Expected "]" to close table key.

main: OBRACE SEMICOLON
##
## Ends in an error in state: 4.
##
## simple_type -> OBRACE . table_body CBRACE [ SEMICOLON PIPE OSQUARE EOF DOTS CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OBRACE
##

Expected a table key or type.

main: OBRACE TRUE OSQUARE
##
## Ends in an error in state: 60.
##
## table_body -> table_entry . [ CBRACE ]
## table_body -> table_entry . table_sep table_body [ CBRACE ]
##
## The known suffix of the stack is as follows:
## table_entry
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production function_type -> simple_type
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
## In state 19, spurious reduction of production var_ty -> ty
## In state 59, spurious reduction of production table_entry -> var_ty
##

Unexpected token after table entry (are you missing a "}"?)

main: OBRACE TRUE SEMICOLON SEMICOLON
##
## Ends in an error in state: 63.
##
## table_body -> table_entry table_sep . table_body [ CBRACE ]
##
## The known suffix of the stack is as follows:
## table_entry table_sep
##

Expected another table entry or "}".

main: OPAREN SEMICOLON
##
## Ends in an error in state: 3.
##
## simple_type -> OPAREN . ty CPAREN [ SEMICOLON PIPE OSQUARE EOF DOTS CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OPAREN
##

Unexpected token (expected a type).

main: OPAREN TRUE SEMICOLON
##
## Ends in an error in state: 67.
##
## simple_type -> OPAREN ty . CPAREN [ SEMICOLON PIPE OSQUARE EOF DOTS CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## OPAREN ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
##

Expected closing ")".

main: SEMICOLON
##
## Ends in an error in state: 0.
##
## main' -> . main [ # ]
##
## The known suffix of the stack is as follows:
##
##

Expected type

main: TRUE PIPE SEMICOLON
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(PIPE,function_type) -> function_type PIPE . separated_nonempty_list(PIPE,function_type) [ SEMICOLON OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## function_type PIPE
##

Expected type after "|"

main: TRUE SEMICOLON
##
## Ends in an error in state: 69.
##
## main -> ty . EOF [ # ]
##
## The known suffix of the stack is as follows:
## ty
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 24, spurious reduction of production separated_nonempty_list(PIPE,function_type) -> function_type
## In state 22, spurious reduction of production ty -> separated_nonempty_list(PIPE,function_type)
##

Not expecting any more types.

main: TRUE TRUE
##
## Ends in an error in state: 24.
##
## separated_nonempty_list(PIPE,function_type) -> function_type . [ SEMICOLON OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
## separated_nonempty_list(PIPE,function_type) -> function_type . PIPE separated_nonempty_list(PIPE,function_type) [ SEMICOLON OSQUARE EOF CSQUARE CPAREN COMMA CBRACE ]
##
## The known suffix of the stack is as follows:
## function_type
##

Did you mean to declare a union type?
